{
  "version": 3,
  "sources": ["../../redux-persist/es/constants.js", "../../redux-persist/es/createMigrate.js"],
  "sourcesContent": ["export var KEY_PREFIX = 'persist:';\nexport var FLUSH = 'persist/FLUSH';\nexport var REHYDRATE = 'persist/REHYDRATE';\nexport var PAUSE = 'persist/PAUSE';\nexport var PERSIST = 'persist/PERSIST';\nexport var PURGE = 'persist/PURGE';\nexport var REGISTER = 'persist/REGISTER';\nexport var DEFAULT_VERSION = -1;", "import { DEFAULT_VERSION } from './constants';\nexport default function createMigrate(migrations, config) {\n  var _ref = config || {},\n      debug = _ref.debug;\n\n  return function (state, currentVersion) {\n    if (!state) {\n      if (process.env.NODE_ENV !== 'production' && debug) console.log('redux-persist: no inbound state, skipping migration');\n      return Promise.resolve(undefined);\n    }\n\n    var inboundVersion = state._persist && state._persist.version !== undefined ? state._persist.version : DEFAULT_VERSION;\n\n    if (inboundVersion === currentVersion) {\n      if (process.env.NODE_ENV !== 'production' && debug) console.log('redux-persist: versions match, noop migration');\n      return Promise.resolve(state);\n    }\n\n    if (inboundVersion > currentVersion) {\n      if (process.env.NODE_ENV !== 'production') console.error('redux-persist: downgrading version is not supported');\n      return Promise.resolve(state);\n    }\n\n    var migrationKeys = Object.keys(migrations).map(function (ver) {\n      return parseInt(ver);\n    }).filter(function (key) {\n      return currentVersion >= key && key > inboundVersion;\n    }).sort(function (a, b) {\n      return a - b;\n    });\n    if (process.env.NODE_ENV !== 'production' && debug) console.log('redux-persist: migrationKeys', migrationKeys);\n\n    try {\n      var migratedState = migrationKeys.reduce(function (state, versionKey) {\n        if (process.env.NODE_ENV !== 'production' && debug) console.log('redux-persist: running migration for versionKey', versionKey);\n        return migrations[versionKey](state);\n      }, state);\n      return Promise.resolve(migratedState);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  };\n}"],
  "mappings": ";AAAO,IAAI,aAAa;AACjB,IAAI,QAAQ;AACZ,IAAI,YAAY;AAChB,IAAI,QAAQ;AACZ,IAAI,UAAU;AACd,IAAI,QAAQ;AACZ,IAAI,WAAW;AACf,IAAI,kBAAkB;;;ACNd,SAAR,cAA+B,YAAY,QAAQ;AACxD,MAAI,OAAO,UAAU,CAAC,GAClB,QAAQ,KAAK;AAEjB,SAAO,SAAU,OAAO,gBAAgB;AACtC,QAAI,CAAC,OAAO;AACV,UAA6C;AAAO,gBAAQ,IAAI,qDAAqD;AACrH,aAAO,QAAQ,QAAQ,MAAS;AAAA,IAClC;AAEA,QAAI,iBAAiB,MAAM,YAAY,MAAM,SAAS,YAAY,SAAY,MAAM,SAAS,UAAU;AAEvG,QAAI,mBAAmB,gBAAgB;AACrC,UAA6C;AAAO,gBAAQ,IAAI,+CAA+C;AAC/G,aAAO,QAAQ,QAAQ,KAAK;AAAA,IAC9B;AAEA,QAAI,iBAAiB,gBAAgB;AACnC,UAAI;AAAuC,gBAAQ,MAAM,qDAAqD;AAC9G,aAAO,QAAQ,QAAQ,KAAK;AAAA,IAC9B;AAEA,QAAI,gBAAgB,OAAO,KAAK,UAAU,EAAE,IAAI,SAAU,KAAK;AAC7D,aAAO,SAAS,GAAG;AAAA,IACrB,CAAC,EAAE,OAAO,SAAU,KAAK;AACvB,aAAO,kBAAkB,OAAO,MAAM;AAAA,IACxC,CAAC,EAAE,KAAK,SAAU,GAAG,GAAG;AACtB,aAAO,IAAI;AAAA,IACb,CAAC;AACD,QAA6C;AAAO,cAAQ,IAAI,gCAAgC,aAAa;AAE7G,QAAI;AACF,UAAI,gBAAgB,cAAc,OAAO,SAAUA,QAAO,YAAY;AACpE,YAA6C;AAAO,kBAAQ,IAAI,mDAAmD,UAAU;AAC7H,eAAO,WAAW,UAAU,EAAEA,MAAK;AAAA,MACrC,GAAG,KAAK;AACR,aAAO,QAAQ,QAAQ,aAAa;AAAA,IACtC,SAAS,KAAK;AACZ,aAAO,QAAQ,OAAO,GAAG;AAAA,IAC3B;AAAA,EACF;AACF;",
  "names": ["state"]
}
